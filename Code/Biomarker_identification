```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.show = 'hide')
setwd("C:/Users/XXXX") #Set working directory
library(tidyverse)
library(mixOmics)
library(stringr)
library(ggplot2)
library(ggpubr)
library(vegan)
library(tibble)
library(CoDaSeq)
library(dplyr)
```

```{r data_import}
#read_file
feature_table <- read_csv("featuretable_reformated.csv") #import feature table with filenames and feature IDs
library_matches <- read_tsv("merged_results_with_gnps.tsv") #annotation file
metadata <- read_csv("Metadata_500food.csv") %>% arrange(filename) #import metadata which include food ontology classification

#data_transpose
data_transpose <- feature_table %>% 
  column_to_rownames("row ID") %>% 
  dplyr::select(contains(".mzML")) %>% 
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column("filename")


#remove Peak area from filename from feature table
data_transpose$filename <- gsub(" Peak area", "", data_transpose$filename)
data_transpose <- data_transpose %>% arrange(filename)

m_filter <- metadata %>%
  filter(!str_detect(filename, "QC")) %>%
  filter(!str_detect(sample_type_group3, "mineral|game meat|water|insect|reptile|sap|invertebrate")) %>%
  filter(!str_detect(sample_type_group4, "mouse|rat"))%>%
  filter(!str_detect(sample_type_group5, "cheese|betel nut")) %>%
  filter(!str_detect(filename, "P1_F10_G75112")) #Filter outliers and uncommon food

data_transpose <- data_transpose %>% 
  filter(filename %in% m_filter$filename)


#TIC normalisation
# Set the row names using the 'filename' column
Sample_tic <- column_to_rownames(data_transpose, var = "filename")
Sample_tic <- t(Sample_tic) %>% as.data.frame()
Sample_tic <- Sample_tic + 1
Sample_tic <- sweep(Sample_tic, 1, rowSums(Sample_tic), FUN = "/")
Sample_tic <- Sample_tic * 1e3
Sample_tic <- t(Sample_tic) %>% as.data.frame()
Sample_tic <- Sample_tic %>% rownames_to_column("filename")

zero_var_cols <- which(apply(Sample_tic, 2, var) == 0)
Sample_tic <- Sample_tic[, -zero_var_cols]

data_transpose <- Sample_tic

#filter_data
filter_data <- Sample_tic %>%
  filter(filename %in% m_filter$filename) 
m_filter <- m_filter %>% 
  filter(filename %in% filter_data$filename) %>%
  arrange(filename)
```

```{r PCA}
#PCA analysis#
PCA_whole <- mixOmics::pca(filter_data, ncomp = 4, scale = TRUE)
PCA_whole_scores <- data.frame(PCA_whole$variates$X, m_filter)
PCA_plot <- PCA_whole_scores %>%
  ggscatter(x = "PC1", y = "PC2", color = "sample_type_group4", alpha = 1, size = 2,
            title = paste("PCA", "Simple Foods", sep = " "),
            xlab = paste("PC1 (", round(PCA_whole$prop_expl_var$X[1]*100, digits = 2),"%)", sep = ""), 
            ylab = paste("PC2 (", round(PCA_whole$prop_expl_var$X[2]*100, digits = 2),"%)", sep = ""),
            ggtheme = theme_bw()) +
  stat_ellipse(aes(colour = sample_type_group4), alpha = 1) + 
  geom_point(
    data = PCA_whole_scores %>% 
      group_by(sample_type_group4) %>% 
      summarise(across(matches("PC"), mean)),  # Calculate mean PC1 and PC2
    aes(PC1, PC2, color = sample_type_group4), 
    size = 4, 
    shape = 8  # Star-shaped marker for centroids
  ) +
  theme(plot.title = element_text(size = 20, colour = "black"),
        axis.title = element_text(size = 20),
        axis.text = element_text(size = 20, face = "bold"),
        panel.border = element_rect(color = "black", size = 1.5)) +  # Adjust border color and thickness here
  coord_fixed()

plot(PCA_plot)
#ggsave("PCA_Plasma_visit_code.tiff", plot = PCA_plot, dpi = 500, width = 8, height = 6)

```

```{r Loop categories for biomarkers}
library(mixOmics)
library(tidyverse)

### 1. PREPARE DATA ###

# The grouping variable is stored in sample_group.
sample_group <- PCA_whole_scores$sample_type_group3
PCA_whole_scores$sample_type_group3 <- as.factor(sample_group)

# Prepare numeric data for PLS-DA.
filter_data <- filter_data %>%
  column_to_rownames("filename") %>%
  dplyr::select(where(is.numeric))

# Prepare data from data_transpose.
Global <- data_transpose %>% 
  column_to_rownames("filename") %>% 
  t() %>% 
  as.data.frame() %>% 
  rownames_to_column("#Scan#")
# Optionally, select only specific columns (if needed)
Global <- Global[, grep("J|G|F|P|Scan", colnames(Global))]
Global <- Global %>% column_to_rownames("#Scan#")

### 2. LOOP OVER EACH CATEGORY ###
categories <- unique(m_filter$sample_type_group3)
all_features <- data.frame()  # To store features passing both filters

for (cat in categories) {
  
  #### A. PLS-DA & VIP Extraction ####
  # Create a binary grouping: current category vs. all others
  binary_group <- ifelse(m_filter$sample_type_group3 == cat, cat, "Other")
  
  # Run PLS-DA using the numeric data.
  PLSDA_model <- mixOmics::plsda(filter_data, binary_group, ncomp = 5, scale = TRUE)
  
  # Extract VIP scores and loadings (using component 1)
  vip_scores <- mixOmics::vip(PLSDA_model)
  loadings   <- as.data.frame(PLSDA_model$loadings$X)
  
  # Combine into a results data frame.
  vip_results <- data.frame(
    Feature  = rownames(vip_scores),
    VIP      = vip_scores[, 1],
    Loading  = loadings[, 1],
    category = cat,
    stringsAsFactors = FALSE
  )
  
  # Filter for features with VIP > 1.5
  important_vip <- vip_results %>% filter(VIP > 6)
  
  #### B. Fold-Change Evaluation on VIP-Passing Features ####
  # Use only features that passed the VIP filter.
  matching_features <- important_vip$Feature
  
  if (length(matching_features) > 0) {
    # Subset Global to keep only rows (features) in matching_features.
    local <- Global %>% 
      rownames_to_column("#Scan#") %>% 
      filter(`#Scan#` %in% matching_features) %>% 
      column_to_rownames("#Scan#")
    
    # Get sample filenames for the current category and the others.
    sample_files <- m_filter %>% filter(sample_type_group3 == cat) %>% pull(filename)
    other_files  <- m_filter %>% filter(sample_type_group3 != cat) %>% pull(filename)
    
    # Create regex patterns to select columns.
    pattern_cat   <- paste(sample_files, collapse = "|")
    pattern_other <- paste(other_files, collapse = "|")
    
    # Subset local into category and non-category data.
    category_data     <- local %>% dplyr::select(matches(pattern_cat))
    non_category_data <- local %>% dplyr::select(matches(pattern_other))
    
    # Proceed only if both groups have data.
    if (ncol(category_data) > 0 && ncol(non_category_data) > 0) {
      # Compute the row means for each feature.
      category_means     <- rowMeans(category_data, na.rm = TRUE)
      non_category_means <- rowMeans(non_category_data, na.rm = TRUE)
      
      # Calculate fold-change (assuming non_category_means are nonzero)
      fold_change <- category_means / non_category_means
      
      # Create a fold-change data frame.
      foldchange_df <- data.frame(
        Feature    = names(fold_change),
        FoldChange = fold_change,
        category   = cat,
        stringsAsFactors = FALSE
      )
      
      # Filter for features with fold-change > 4.
      passed_both <- foldchange_df %>% filter(FoldChange > 10)
      
      # Mark these features as having passed both criteria.
      if (nrow(passed_both) > 0) {
        passed_both <- passed_both %>% mutate(Method = "VIP+FoldChange")
      }
    } else {
      passed_both <- data.frame()
    }
  } else {
    passed_both <- data.frame()
  }
  
  #### C. Append Results ####
  # Only append features that passed both the VIP and fold-change thresholds.
  all_features <- bind_rows(all_features, passed_both)
}

### 3. Summarize Biomarkers ###
biomarkers <- all_features %>% 
  group_by(Feature) %>% 
  summarise(
    category = paste(unique(category), collapse = ", "),
    Method   = paste(unique(Method), collapse = ", ")
  ) %>% 
  ungroup() %>% 
  as.data.frame()

### 4. VIEW OR SAVE RESULTS ###
head(all_features)
head(biomarkers)

# Optionally, export the results:
# write.csv(all_features, "Features_VIP_FoldChange.csv", row.names = FALSE)
#write.csv(biomarkers, "Biomarkers_level3_new.csv", row.names = FALSE)

```
